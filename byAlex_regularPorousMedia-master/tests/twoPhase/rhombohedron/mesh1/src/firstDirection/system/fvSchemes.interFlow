/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:                                        |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default                         Euler;
}

gradSchemes
{
    default                         Gauss linear;
//     grad(p)                         cellLimited Gauss linear 1;
//     grad(U)                         cellLimited Gauss linear 1;
}

divSchemes
{
    default                             none;

    div(rhoPhi,U)                       Gauss vanLeer;
    div(phi,alpha)                      Gauss vanLeer;
    div(phirb,alpha)                    Gauss interfaceCompression;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

//     div(phi,U)                      bounded Gauss vanLeer;
//     div(phi,k)                      bounded Gauss vanLeer;
//     div(phi,epsilon)                bounded Gauss vanLeer;
//     div(phi,R)                      bounded Gauss vanLeer;
//     div(R)                          bounded Gauss vanLeer;
//     div(phi,nuTilda)                bounded Gauss vanLeer;
//     div((nuEff*dev2(T(grad(U)))))   Gauss linear;
}

laplacianSchemes
{
    default                         Gauss linear corrected;
}

interpolationSchemes
{
    default                         linear;
}

snGradSchemes
{
    default                         corrected;
}

fluxRequired
{
    default                         no;
    p_rgh;
    pcorr;
    alpha1;
    alpha.phase1;
}

/*wallDist
{
    method meshWave;
}*/

// ************************************************************************* //
